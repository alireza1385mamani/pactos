
#brailleDisplayDrivers/pactos.py
#A part of NonVisual Desktop Access (NVDA)
#This file is covered by the GNU General Public License.
#See the file COPYING for more details.
#Copyright (C) 2012-2015 NV Access Limited

# -*-coding: utf-8 -*-

import os
import winreg
import itertools
import serial
import hwPortUtils
import braille
import inputCore
from logHandler import log
from baseObject import ScriptableObject
from scriptHandler import script
import brailleInput
import hwIo
from hwIo import intToByte
from typing import List, Union
import config
import api
import gui
import codecs
#import ast
import ctypes
import winUser
import threading
import select
import time
from ctypes import *
import struct
import speech
import brailleTables
import globalVars
import shutil
from sys import path as syspath
from os import path as ospath

#Addon consts
ADDON_NAME = "pactos"
PLUGIN_DIR = os.path.abspath(os.path.join(globalVars.appArgs.configPath, "addons",ADDON_NAME))

syspath.append(ospath.join(PLUGIN_DIR, r"bjSettings\lib.win32-3.7"))
syspath.append(ospath.join(PLUGIN_DIR, r"bjSettings"))

import bluetooth
import paGlobals

user32=windll.user32

TIMEOUT = 0.2
BAUD_RATE = 115200
PARITY = serial.PARITY_NONE

# Serial
HEADER = b"\x1b"
MSG_INIT = b"\x00"
MSG_INIT_RESP = b"\x01"
MSG_DISPLAY = b"\x02"
MSG_KEY_DOWN = b"\x05"
MSG_KEY_UP = b"\x06"

# HID
HR_CAPS = b"\x01"
HR_KEYS = b"\x04"
HR_BRAILLE = b"\x05"
HR_POWEROFF = b"\x07"

BUFFER_SIZE_CDC = 32
BUFFER_SIZE_HID = 64

IDEN_REQ_HID ="\x00"*BUFFER_SIZE_HID + "\x82"
IDEN_REQ_HID = IDEN_REQ_HID.encode()

RESET_REQ ="\x00"*56 + "\x26" + "\x00"*8
RESET_REQ = RESET_REQ.encode()

IDEN_REQ_CDC =bytes([0]*(BUFFER_SIZE_CDC-1)+[130]);#"\x00"*(BUFFER_SIZE_CDC-1) + "\x82"
#IDEN_REQ_CDC = IDEN_REQ_CDC.encode()

KEY_NAMES = {
	# Braille keyboard.
	2: "dot1",
	3: "dot2",
	4: "dot3",
	5: "dot4",
	6: "dot5",
	7: "dot6",
	8: "space",
	# Command keys.
	9: "BackSpace",
	10: "Up",
	11: "Down",
	12: "LeftScroll",
	13: "RightScroll",
	14: "Enter",
	15: "Left",
	16: "Right",
	17: "LSpace",
	18: "Alt",
	19: "Control",
	20: "ScreenReader",
	21: "Up2",
	22: "Down2",
	23: "dot7",
	24: "dot8",
}



KEY_VALUES_HID =    [3, 6,  8, 16, 2, 5, 17, 15, 14, 9, 12, 10, 4, 7, 13, 11]
KEY_VALUES_CDC =    [3, 6, 19, 16, 2, 5, 17, 15, 14, 9, 18, 10, 4, 7, 20, 11, 12, 21, 13, 22]
KEY_VALUES_CDC_78 = [3, 6, 19, 16, 2, 5, 17, 15, 14, 9, 24, 10, 4, 7, 23, 11, 12, 21, 13, 22]


FIRST_ROUTING_KEY = 80
DOT1_KEY = 2
DOT6_KEY = 7

DOT7_KEY = 23
DOT8_KEY = 24

SPACE_KEY1 = 8
SPACE_KEY2 = 17

pac_curr_lang = "en"

#### copy tables into nvda path  ###
table_names = ["ar-fa.utb", "en-us-g1.ctb", "ar-ar-g1.utb", "fa-ir-g1.utb", "braille-patterns.cti", "chardefs.cti"]

dst1 = "C:\\Program Files(x86)\\NVDA\\louis\\tables\\ar-fa.utb"
dst = "C:\\Program Files (x86)\\NVDA\\louis\\tables"


for table in table_names:
	try: 
		shutil.copy2(os.path.join(PLUGIN_DIR,"bjSettings",table), dst)
	except:
		log.info("pactos driver : can not copy tables!")
#shutil.copyfile(os.path.join(PLUGIN_DIR,"bjSettings",src2), dst)

####

def _getPorts():

	# USB HID.
	for portInfo in hwPortUtils.listHidDevices():
		if portInfo.get("usbID") == "VID_03EB&PID_2013":
			yield "USB HID", portInfo["devicePath"]

	# USB serial.
	try:
		rootKey = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SYSTEM\CurrentControlSet\Enum\USB\Vid_03EB&Pid_2018")
	except WindowsError:
		# A display has never been connected via USB.
		pass
	else:
		with rootKey:
			for index in itertools.count():
				try:
					keyName = winreg.EnumKey(rootKey, index)
				except WindowsError:
					break
				try:
					with winreg.OpenKey(rootKey, os.path.join(keyName, "Device Parameters")) as paramsKey:
						yield "USB serial", winreg.QueryValueEx(paramsKey, "PortName")[0]
				except WindowsError:
					continue
	# Bluetooth.
	if paGlobals.search_bluetooth:
		speech.speakMessage("Trying to find bluetooth device, please wait")
		target_name = paGlobals.bluetooth_device_name
		print("target ====>>>> {0}".format(target_name))
		target_address = None
		nearby_devices = bluetooth.discover_devices()

		for bdaddr in nearby_devices:
			log.info("found  bluetooth device with address %r " % bdaddr)
			log.info("found  bluetooth device with name %r " % bluetooth.lookup_name(bdaddr))
			if target_name == bluetooth.lookup_name(bdaddr):
				target_address = bdaddr
				log.info("found target bluetooth device with address %r " % target_address)
				yield "bluetooth" , target_address


class BrailleDisplayDriver(braille.BrailleDisplayDriver,ScriptableObject):
	"""pactos driver.
	"""
	name = "pactos"
	# Translators: The name of a series of braille displays.
	description = _("Pactos ")
	isThreadSafe = True

	@classmethod
	def check(cls):
		try:
			next(_getPorts())
		except StopIteration:
			# No possible ports found.
			return False
		return True

	def bt_read(self):
		while True:
			time.sleep(0.0001)
			readable, writable, excepts = select.select([self.bt_socket],[],[])
			if self.bt_socket in readable:
				self.rbt_buff = self.bt_socket.recv(BUFFER_SIZE_CDC)
			#self.rbt_buff = self.bt_socket.recv(1024)
			time.sleep(0.0001)
			log.info("bluetooth data ----->>>>> %r" % self.rbt_buff)
			if ord(self.rbt_buff[0]) != 0:
				self._hidOnReceive(self.rbt_buff)
			log.info("OMGOMGOGMGOGMGO -=-=-=-=- MESSAGE RECIVED == %r " % self.bt_buff)

	def sync_keyboards(self):
		w = user32.GetForegroundWindow()
		tid = user32.GetWindowThreadProcessId(w, 0)
		lid = user32.GetKeyboardLayout(tid)
		log.info("-----------> Lang ID1 == %r" %  lid)
		langId = hex(ctypes.windll.user32.GetKeyboardLayout(0))
		#log.info("-----------> Lang ID2 == %r" % langId)
		if lid == 69796905 or lid == -255851479:
			log.info("**** TABLE CHANGED TO FA!")
			config.conf["braille"]["inputTable"]= brailleTables.RENAMED_TABLES["ar-fa.utb"]
			config.conf["braille"]["translationTable"]= brailleTables.RENAMED_TABLES["ar-fa.utb"]
			brailleInput.handler.table =brailleTables.getTable(brailleTables.RENAMED_TABLES["ar-fa.utb"])
#			braille.handler.update()
			paGlobals.pac_curr_lang = "fa"
		else:
			log.info("**** TABLE CHANGED TO EN!")
			config.conf["braille"]["inputTable"]="en-us-g1.ctb"
			config.conf["braille"]["translationTable"]="en-us-g1.ctb"
			brailleInput.handler.table =brailleTables.getTable("en-us-g1.ctb")
#			braille.handler.update()
			paGlobals.pac_curr_lang = "en"


	def __init__(self):
		super(BrailleDisplayDriver, self).__init__()
		#self.numCells = 20
		self.bt_read_thread = threading.Thread(target=self.bt_read)
		self.reorder = False
		self.isMod78 = False
		self.model = "not_set"

		paGlobals.search_bluetooth = False
		iniFilePath = os.path.join(PLUGIN_DIR,"bjSettings","configs.ini")
		iniFile = open(iniFilePath,"r")
		for line in iniFile:
			if line.startswith(codecs.BOM_UTF8.decode()):
				line = line[3:]
			#line = line[:-1]
			vals = str.split(line,"=")
			#log.info("VALS ----------->")
			#print vals
			#log.info("VALS <-----------")
			if "reorder" in vals[0]:
				if vals[1]=="" or vals[1].startswith('0'):
					self.reorder = False
				else:
					self.reorder = True
			if "bt_name" in vals[0]:
				if vals[1]=="" or vals[1].startswith('0'):
					paGlobals.search_bluetooth = False
				else:
					paGlobals.search_bluetooth = True
					paGlobals.bluetooth_device_name = vals[1].rstrip()
			if "lang1" in vals[0]:
				if vals[1]=="" or vals[1].startswith('0'):
					paGlobals.lang1 = "fa-ir-g1.utb"
				else:
					paGlobals.lang1 = vals[1].rstrip()
			if "lang2" in vals[0]:
				if vals[1]=="" or vals[1].startswith('0'):
					paGlobals.lang2 = "en-us-g1.ctb"
				else:
					paGlobals.lang2 = vals[1].rstrip()

		iniFile.close()

#		self.sync_keyboards()

		for portType, dev_adr in _getPorts():
			self.isHid = portType == "USB HID"
			self.isSerial = portType == "USB serial"
			self.isBluetooth = portType == "bluetooth"

			#print("@#@#@#@#@#@#@#@#@#@#@#@#@#@#@#@#{port}{adr}".format(port=portType,adr=dev_adr))
			# Try talking to the display.
			try:
				if self.isHid:
					log.info("~~~~~~~~~~~   THIS IS HID ~~~~~~~~~~~~~")
					paGlobals.commands_file = os.path.join(PLUGIN_DIR,"bjSettings","commands.ini")
					paGlobals.gestures_file = os.path.join(PLUGIN_DIR,"bjSettings","gestures.ini")
					self.numCells = 40
					self._dev = hwIo.Hid(dev_adr, onReceive=self._hidOnReceive)
                    self._dev.write(IDEN_REQ_HID)

				elif self.isSerial:
					log.info("~~~~~~~~~~~   THIS IS SERIAL ~~~~~~~~~~~~~")
					paGlobals.commands_file = os.path.join(PLUGIN_DIR,"bjSettings","commands_nt.ini")
					paGlobals.gestures_file = os.path.join(PLUGIN_DIR,"bjSettings","gestures_nt.ini")
					self.numCells = 20
					#log.info("WWWWWWWWWWWWWWWWWWWWWWWRRRRR  target address == %r wWWWWWWWWWWWWWWWRRR" % dev_adr)
					self._dev = hwIo.Serial(dev_adr, baudrate=BAUD_RATE, parity=PARITY, timeout=TIMEOUT, writeTimeout=TIMEOUT, onReceive=self._serOnReceive)
					#self._dev.setDTR(True)
				else:
					log.info("~~~~~~~~~~~   THIS IS BLUETOOTH ~~~~~~~~~~~~~")
					paGlobals.commands_file = os.path.join(PLUGIN_DIR,"bjSettings","commands_nt.ini")
					paGlobals.gestures_file = os.path.join(PLUGIN_DIR,"bjSettings","gestures_nt.ini")
					self.numCells = 20
					# self._dev = hwIo.Serial(dev_adr, baudrate=BAUD_RATE, timeout=TIMEOUT,
								  # writeTimeout=TIMEOUT,onReceive=self._serOnReceive)
					try:
						self.bt_socket = bluetooth.BluetoothSocket( bluetooth.RFCOMM )
						#self.bt_socket.settimeout(0.0)
						self.bt_socket.connect((dev_adr, 1))
						log.info("CONNECTION ESTABLISHED...")
						log.info(self.bt_socket.getsockname())
					except:
						log.info("CAN NOT CONNECT TO BLUETOOTH!")
			except EnvironmentError:
				continue
			if self.isHid :
				log.info("pactos : want to send first HID packet to device ...")
				#log.debug("dskfksjdksjkdjskjd")
				#data = self._dev.getFeature(MSG_INIT)
				self._dev.write(IDEN_REQ_HID)
				self._dev.waitForRead(10)
				#self.numCells = 20 # ord(data[24])
			elif self.isSerial:
				log.info("pactos : want to send first Serial packet to device ...")
				self._dev.write(IDEN_REQ_CDC)
				self._dev.waitForRead(10)
			else:
				log.info("pactos : want to send first bluetooth packet to device ...")
				#self.bt_buff = "\x00"*(BUFFER_SIZE_HID-1) + "\x82"
				self.bt_buff = IDEN_REQ_CDC
				self.bt_socket.send(self.bt_buff)
				log.info("pactos : first bluetooth packet sent.")
				self.bt_read_thread.start()
				log.info("pactos : bluetooth read thread started.")

			if self.numCells:
				# A display responded.
				log.info("Found display with {cells} cells connected via {type} ({port})".format(
					cells=self.numCells, type=portType, port=dev_adr))
				break
			if self.isHid or self.isSerial:
			    self._dev.close()

		else:
			raise RuntimeError("No display found")

		self.read_commands()
		self.read_gestures()
		
		self._keysDown = set()
		self._ignoreKeyReleases = False

	def terminate(self):
		try:
			super(BrailleDisplayDriver, self).terminate()
		finally:
			# Make sure the device gets closed.
			# If it doesn't, we may not be able to re-open it later.
			#self._dev.write(RESET_REQ)
			self._dev.close()

	def _serSendMessage(self, msgId, payload=""):
		if isinstance(payload, (int, bool)):
			payload = chr(payload)
		self._dev.write("{header}{id}{length}{payload}".format(
			header=HEADER, id=msgId,
			length=chr(len(payload)), payload=payload))

	def _serOnReceive(self, data):
		#if data != HEADER:
		#	log.debugWarning("Ignoring byte before header: %r" % data)
		#	return
		#msgId = self._dev.read(1)
		#length = ord(self._dev.read(1))
		#payload = data + self._dev.read(BUFFER_SIZE_CDC)
		payload = data + self._dev.read(BUFFER_SIZE_CDC-1)

		#self._dev.waitForRead(10)
		self._hidOnReceive(payload)

	def _btSendMessage(self,data):
		self.bt_socket.send(data)


	def _serHandleResponse(self, msgId, payload):
		if msgId == MSG_INIT_RESP:
			if ord(payload[0]) != 0:
				# Communication not allowed.
				log.debugWarning("Display at %r reports communication not allowed" % self._dev.port)
				return
			self.numCells = ord(payload[2])

		elif msgId == MSG_KEY_DOWN:
			payload = ord(payload)
			self._keysDown.add(payload)
			# This begins a new key combination.
			self._ignoreKeyReleases = False

		elif msgId == MSG_KEY_UP:
			payload = ord(payload)
			self._handleKeyRelease()
			self._keysDown.discard(payload)

		else:
			log.debugWarning("Unknown message: id {id!r}, payload {payload!r}".format(id=msgId, payload=payload))

	def define_dotUni_map(self, required_keys):
		d1 = required_keys[0];
		d2 = required_keys[1];
		d3 = required_keys[2];
		d4 = required_keys[3];
		d5 = required_keys[4];
		d6 = required_keys[5];
		d7 = required_keys[6];
		d8 = required_keys[7];
		Enter = required_keys[8];
		BackSpace = required_keys[9];
		Control = required_keys[10];
		Space = required_keys[11];

		maps = {
			(d3|d6|d7): u'\u2212',
			(d5|d7): u'\u0022',
			(d1|d2|d3|d4|d6|d8): u'\u0026',
			(d2|d3|d5|d6|d8): u'\u0029',
			(d2|d3|d5|d6|d7): u'\u0028',
			(d1|d4|d6|d8): u'\u0025',
			(d2|d3|d5|d8): u'\u002b',
			(d2|d3|d6|d8): u'\u002a',
			(d3|d4|d8): u'\u002f',
			(d1|d2|d4|d6|d7|d8): u'\u0024',
			(d1|d3|d5|d7|d8): u'\u003e',
			(d2|d4|d6|d7|d8): u'\u003c',
			(d1|d2|d5|d6|d8): u'\u005c',
			(d1|d2|d3|d7|d8): u'\u00a3',
			(d1|d3|d4|d5|d6|d7|d8): u'\u00a5',
			(d1|d3|d4|d6|d7|d8): u'\u00a9',
			(d3|d4|d5|d6|d8): u'\u00b0',
			(d1|d3|d4|d5|d7|d8): u'\u00ac',
			(d2|d3|d4|d5|d7|d8): u'\u00ae',
			(d4|d5|d6|d7|d8): u'\u00b6',
			(d2|d4|d6|d8): u'\u2022',
			(d4|d6|d8): u'\u2026',
			(d2|d7): u'\u064e',
			(d2|d5|d7): u'\u0652',
			(d4|d5|d6|d8): u'\u007c',
			(d3|d4|d6|d8): u'\u005e',
			(d4|d8): u'\u0048',
			(d1|d2|d3|d5|d6|d7): u'\u005b',
			(d2|d3|d4|d5|d6|d8): u'\u005d',
			(d2|d3|d6|d7): u'\u00ab',
			(d3|d5|d6|d8): u'\u00bb',
			(d3|d6|d8): u'\u201c',
			(d6|d7|d8): u'\u201d',
			(d3|d5|d8): u'\u25e6',
			(d2|d3|d7): u'\u061b',
			(d3|d4|d7): u'\u0625',
			(d1|d3|d6|d7|d8): u'\u20ac',

		}

		return maps;



	def _hidOnReceive(self, data):
#		self.sync_keyboards()

		currentAppName = api.getFocusObject().appModule.appName
		log.info("^^^^^^^^^^ %r ^^^^^^^^^^^^^^^^^^^^", data)
		log.info("^^^^^^^ data[0] = %r, data[1] = %r, data[2] = %r, data[3] = %r, data[4] = %r, data[5] = %r data[61] = %r, data[62] = %r ^^^^^^^^^", data[0], data[1], data[2], data[3], data[4], data[5], data[61], data[62])
		log.info(currentAppName)

		num_bytes = 0
		start_idx = 0

		if self.isHid:
			if len(data) != BUFFER_SIZE_HID+1:
				log.info("Recieved Data == len = %r", len(data))
				return
			if ord(data[63])==64:
				self.model = "bj2"
				log.info("^&^&^&^&^&^&^&^&^&^&^&^&0000000  bj2 0000000000&^&^&^&^&^&&^&^&^&^&^&^&^&")
				num_bytes = 3
				KEY_VALUES = KEY_VALUES_HID
				self.numCells = 40
			else:
				self.model = "bj4"
				log.info("^&^&^&^&^&^&^&^&^&^&^&^&0000000  bj4 0000000000&^&^&^&^&^&&^&^&^&^&^&^&^&")
				num_bytes = 3
				KEY_VALUES = KEY_VALUES_CDC_78  if self.isMod78 else KEY_VALUES_CDC
				self.numCells = 20
		else:
			if len(data) != BUFFER_SIZE_CDC:
				return
			self.model = "nt"
			log.info("^&^&^&^&^&^&^&^&^&^&^&^&0000000  nt 0000000000&^&^&^&^&^&&^&^&^&^&^&^&^&")
			num_bytes = 4
			KEY_VALUES = KEY_VALUES_CDC_78  if self.isMod78 else KEY_VALUES_CDC
			self.numCells = 20


		#if self.model=="bj2": #or (self.isBluetooth and ord(data[0]) == 0):
		#	num_bytes = 3
		#	KEY_VALUES = KEY_VALUES_HID
		#elif self.model=="bj4": #or (self.isBluetooth and ord(data[0]) != 0):
		##	num_bytes = ord(data[0])
		#	num_bytes = 3
		#	KEY_VALUES = KEY_VALUES_CDC_78  if self.isMod78 else KEY_VALUES_CDC

		#if self.isHid: #or (self.isBluetooth and ord(data[0]) == 0):
		#	if len(data) != BUFFER_SIZE_HID+1:
		#		log.info("Recieved Data == len = %r", len(data))
		#		return
		#	cells_hex = ord(data[BUFFER_SIZE_HID-1])
		#	self.numCells = 40 #(cells_hex | (cells_hex >> 2)) >> 1
		#	log.info("Recieved Data == %r", ord(data[63]))
		#	is_20 = (self.numCells == 20)
		#else: #or (self.isBluetooth and ord(data[0]) != 0):
		#	if len(data) != BUFFER_SIZE_CDC:
		#		return
		#	cells_hex = ord(data[BUFFER_SIZE_CDC-1])
		#	self.numCells = 20 #(cells_hex | (cells_hex >> 2)) >> 1
		#	is_20 = (self.numCells == 20)
		d1 = 0x0010; d2 = 0x0001; d3 = 0x1000; d4 = 0x0020; d5 = 0x0002; d6 = 0x2000;
		Enter = 0x0100; BackSpace = 0x0200; Control = 0x0004; Space = 0x0040;

		if self.model=="bj2":
			d7 = 0x0040
			d8 = 0x0004
		else:
			d7 = 0x4000
			d8 = 0x0400

		required_keys = [d1, d2, d3, d4, d5, d6, d7, d8, Enter, BackSpace, Control, Space];

		key2uni_map = self.define_dotUni_map(required_keys);

		keys = (data[num_bytes-1]) | (data[num_bytes-2] << 8)
		route_key = (data[num_bytes])

		tmpSet = set()
		if route_key != 0xff:
			if self.model=="bj4" and route_key==21:
				tmpSet.add(12)
			elif self.model=="bj4" and route_key==22:
				tmpSet.add(21)
			elif self.model=="bj4" and route_key==23:
				tmpSet.add(13)
			elif self.model=="bj4" and route_key==24:
				tmpSet.add(22)
			else:
				tmpSet.add(FIRST_ROUTING_KEY+route_key-1)
		log.info("#################### keys == %r ##############" % keys)
		#and not self.isHid
		if not self.isMod78  and keys == (d7 | d3):
			self.isMod78 = True
			speech.speakMessage(u"ورود به حالت ۸ نقطه")
			return
		if self.isMod78  and keys == (Control | d6):
			self.isMod78 = False
			speech.speakMessage(u"خروج از حالت ۸ نقطه")
			return

		if self.isMod78 and (keys in key2uni_map):
			brailleInput.handler.sendChars(key2uni_map[keys])
			return

		if keys == (d8 | Enter | BackSpace):
			self.change_keyboard_lang()
			return
		if keys == (Control|Space):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u200c')
				return
			return
		if keys == (d8 | d2 | d4 | d5):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u06f0')
				return
			else:
				brailleInput.handler.sendChars(u'\u0030')
				return
		if keys == (d8 | d1):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u06f1')
				return
			else:
				brailleInput.handler.sendChars(u'\u0031')
				return
		if keys == (d8 | d1 | d2):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u06f2')
				return
			else:
				brailleInput.handler.sendChars(u'\u0032')
				return
		if keys == (d8 |d1 | d4):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u06f3')
				return
			else:
				brailleInput.handler.sendChars(u'\u0033')
				return
		if keys == (d8 | d1 | d4 | d5):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u06f4')
				return
			else:
				brailleInput.handler.sendChars(u'\u0034')
				return
		if keys == (d8 | d1 | d5):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u06f5')
				return
			else:
				brailleInput.handler.sendChars(u'\u0035')
				return
		if keys == (d8 | d1 | d2 | d4):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u06f6')
				return
			else:
				brailleInput.handler.sendChars(u'\u0036')
				return
		if keys == (d8 | d1 | d2 | d4 | d5):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u06f7')
				return
			else:
				brailleInput.handler.sendChars(u'\u0037')
				return
		if keys == (d8 | d1 | d2 | d5):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u06f8')
				return
			else:
				brailleInput.handler.sendChars(u'\u0038')
				return
		if keys == (d8 | d2 | d4):
			if config.conf["braille"]["inputTable"]== brailleTables.RENAMED_TABLES["ar-fa.utb"]:
				brailleInput.handler.sendChars(u'\u06f9')
				return
			else:
				brailleInput.handler.sendChars(u'\u0039')
				return

		idx = num_bytes-1
		offset = 0
		while idx > 0:
			for i in range(8):
				key_pressed = (1 << i) & (data[idx])
				if key_pressed:
					tmpSet.add(KEY_VALUES[offset+i])
			offset += 8
			idx -= 1

		self._keysDown = tmpSet
		log.info("keysDown --->>>> %r " % tmpSet)

		try:
			inputCore.manager.executeGesture(InputGesture(self._keysDown, self.isMod78))
		except inputCore.NoInputGestureAction:
			pass

		self._ignoreKeyReleases = True

	def _handleKeyRelease(self):
		if self._ignoreKeyReleases or not self._keysDown:
			return
		try:
			inputCore.manager.executeGesture(InputGesture(self._keysDown))
		except inputCore.NoInputGestureAction:
			pass
		# Any further releases are just the rest of the keys in the combination being released,
		# so they should be ignored.
		self._ignoreKeyReleases = True

	def swap_bits(self,bits,i,j,n):
		x = ((bits >> i) ^ (bits >> j)) & ((1 << n) - 1)
		r = bits ^ ((x << i) | (x << j));
		return r

	def reorder_cells(self,true_cells):
		#reordered_cells = struct.unpack('B',true_cells)
		reordered_cells = []
		for cell in true_cells:
			cell = self.swap_bits(cell,0,4,1)
			cell = self.swap_bits(cell,1,3,1)
			cell = self.swap_bits(cell,3,7,1)
			cell = self.swap_bits(cell,4,6,1)
			reordered_cells.append(cell)
		return reorder_cells #"".join(chr(c) for c in reordered_cells)

	def display(self, cells:List[int]):
		# cells will already be padded up to numCells.
		if(self.reorder):
			cells = self.reorder_cells(cells)
		else:
			cells = cells # "".join(chr(cell) for cell in cells)
		if self.model=="bj2":
			APPEND=bytes([0]*(BUFFER_SIZE_HID-self.numCells))#b"".join(b"\x00"*(BUFFER_SIZE_HID-self.numCells))
		else:
			APPEND=bytes([0]*(BUFFER_SIZE_CDC-self.numCells))#b"".join(b"\x00"*(BUFFER_SIZE_CDC-1-self.numCells)) #this line works for 20 and 40 cell displays
											 #... it is buggy for other values!!!
		if self.isHid or self.isSerial:
			#self._dev.write("\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01")
			
			# self._dev.write("{id}"
				# "{cells}{append}"
			# .format(id=ord("\x00"), cells=cells,append=APPEND.encode()))
			
			'''data = b"".join([
				ord("\x00"),
				bytes(cells),
				[intToByte(x) for x in APPEND]
				#(APPEND.encode()).to_bytes(2, byteorder='big')
			])'''
			
			#data = bytes([0])+ bytes(cells) + b"".join([intToByte(x) for x in APPEND])
			data = bytes(cells) + b"".join([intToByte(x) for x in APPEND])

			print(type(data))
			print(data)
			self._dev.write(b"".join([ intToByte(x) for x in data]))
		else:
			#self._btSendMessage("{cells}{append}"
			#					.format(cells=cells,append=APPEND.encode()))
			#data = bytes([0])+ bytes(cells) + b"".join([intToByte(x) for x in APPEND])
			data = bytes(cells) + b"".join([intToByte(x) for x in APPEND])

			self._btSendMessage(b"".join([ intToByte(x) for x in data]))
			#time.sleep(2)

	def change_keyboard_lang(self):
		if(paGlobals.pac_curr_lang == "lang2"):
			#print win32api.GetKeyboardLayout(0)
			log.info(" +_+_+_+_+_+_+_+_+_+  ==> lang : %r <== +_+_+_+_+_+_+_+_+_+_+", paGlobals.lang1)
			config.conf["braille"]["inputTable"] = paGlobals.lang1 #brailleTables.RENAMED_TABLES["ar-fa.utb"]
			config.conf["braille"]["translationTable"] = paGlobals.lang1 #brailleTables.RENAMED_TABLES["ar-fa.utb"]
			brailleInput.handler.table = brailleTables.getTable(paGlobals.lang1)#brailleTables.RENAMED_TABLES["ar-fa.utb"])
#			braille.handler.update()
			#log.info("XXXXXXXXXXXX    before any keysym XXXXXXXXXXXXX")
			#winUser.keybd_event(0x12, 0xb8, 0x0000, 0)
			#log.info("XXXXXXXXXXXX    after alt press XXXXXXXXXXXXX")
			#winUser.keybd_event(0x10, 0x2a, 0x0000, 0)
			#log.info("XXXXXXXXXXXX    after shift press XXXXXXXXXXXXX")
			#winUser.keybd_event(0x10, 0x2a, 0x0002, 0)
			#log.info("XXXXXXXXXXXX    after shift release XXXXXXXXXXXXX")
			#winUser.keybd_event(0x12, 0xb8, 0x0002, 0)
			#log.info("XXXXXXXXXXXX    after alt release XXXXXXXXXXXXX")

			paGlobals.pac_curr_lang = "lang1"

			log.info("@@@@@@@@@@@@@@@@@@@@@@@ lang2 BOOD!!! @@@@@@@@@@@@@@@@")
			return
		#print win32api.GetKeyboardLayout(0)
		log.info(" +_+_+_+_+_+_+_+_+_+  ==> lang : %r <== +_+_+_+_+_+_+_+_+_+_+", paGlobals.lang2)
		config.conf["braille"]["inputTable"] = paGlobals.lang2 #"en-us-g1.ctb"
		config.conf["braille"]["translationTable"] = paGlobals.lang2 #"en-us-g1.ctb"
		brailleInput.handler.table = brailleTables.getTable(paGlobals.lang2) #"en-us-g1.ctb")
#		braille.handler.update()
		#log.info("XXXXXXXXXXXX    before any keysym (else) XXXXXXXXXXXXX")
		#winUser.keybd_event(0x12, 0xb8, 0x0000, 0)
		#log.info("XXXXXXXXXXXX    after alt press (else) XXXXXXXXXXXXX")
		#winUser.keybd_event(0x10, 0x2a, 0x0000, 0)
		#log.info("XXXXXXXXXXXX    after shift press (else) XXXXXXXXXXXXX")
		#winUser.keybd_event(0x10, 0x2a, 0x0002, 0)
		#log.info("XXXXXXXXXXXX    after shift release (else) XXXXXXXXXXXXX")
		#winUser.keybd_event(0x12, 0xb8, 0x0002, 0)
		#log.info("XXXXXXXXXXXX    after alt release (else) XXXXXXXXXXXXX")

		log.info("@@@@@@@@@@@@@@@@@@@@@@@ lang1 BOOD!!! @@@@@@@@@@@@@@@@")
		paGlobals.pac_curr_lang = "lang2"


	def script_changeInputTable(self, gesture):
		log.info("|||||||||||||||||||||||||||||---->> script_changeInputTable begins <<----|||||||||||||||||||||||||||||||||||")
		w = user32.GetForegroundWindow()
		tid = user32.GetWindowThreadProcessId(w, 0)
		
		#global pac_curr_lang
		if(paGlobals.pac_curr_lang == "en"):
			#print win32api.GetKeyboardLayout(0)
			config.conf["braille"]["inputTable"] = brailleTables.RENAMED_TABLES["ar-fa.utb"]
			config.conf["braille"]["translationTable"] = brailleTables.RENAMED_TABLES["ar-fa.utb"]
			brailleInput.handler.table = brailleTables.getTable(brailleTables.RENAMED_TABLES["ar-fa.utb"])
#			braille.handler.update()
			log.info("XXXXXXXXXXXX    before any keysym XXXXXXXXXXXXX")
			winUser.keybd_event(0x12, 0xb8, 0x0000, 0)
			log.info("XXXXXXXXXXXX    after alt press XXXXXXXXXXXXX")
			winUser.keybd_event(0x10, 0x2a, 0x0000, 0)
			log.info("XXXXXXXXXXXX    after shift press XXXXXXXXXXXXX")
			winUser.keybd_event(0x10, 0x2a, 0x0002, 0)
			log.info("XXXXXXXXXXXX    after shift release XXXXXXXXXXXXX")
			winUser.keybd_event(0x12, 0xb8, 0x0002, 0)
			log.info("XXXXXXXXXXXX    after alt release XXXXXXXXXXXXX")

			paGlobals.pac_curr_lang = "fa"

			log.info("@@@@@@@@@@@@@@@@@@@@@@@ EN BOOD!!! @@@@@@@@@@@@@@@@")
			return
		#print win32api.GetKeyboardLayout(0)
		config.conf["braille"]["inputTable"] = "en-us-g1.ctb"
		config.conf["braille"]["translationTable"] = "en-us-g1.ctb"
		brailleInput.handler.table = brailleTables.getTable("en-us-g1.ctb")
#		braille.handler.update()
		log.info("XXXXXXXXXXXX    before any keysym (else) XXXXXXXXXXXXX")
		winUser.keybd_event(0x12, 0xb8, 0x0000, 0)
		log.info("XXXXXXXXXXXX    after alt press (else) XXXXXXXXXXXXX")
		winUser.keybd_event(0x10, 0x2a, 0x0000, 0)
		log.info("XXXXXXXXXXXX    after shift press (else) XXXXXXXXXXXXX")
		winUser.keybd_event(0x10, 0x2a, 0x0002, 0)
		log.info("XXXXXXXXXXXX    after shift release (else) XXXXXXXXXXXXX")
		winUser.keybd_event(0x12, 0xb8, 0x0002, 0)
		log.info("XXXXXXXXXXXX    after alt release (else) XXXXXXXXXXXXX")

		log.info("@@@@@@@@@@@@@@@@@@@@@@@ FA BOOD!!! @@@@@@@@@@@@@@@@")
		paGlobals.pac_curr_lang = "en"

	# Translators: Describes a command11.


	def read_gestures(self):

		iniFile = open(os.path.join(PLUGIN_DIR,"bjSettings",paGlobals.gestures_file),"r")

		tmpDic = dict()
		for line in iniFile:
			if line.startswith(codecs.BOM_UTF8.decode()):
				line = line[3:]
			#line = line[:-1]
			dic_els = str.split(line,":=")
			secEl = str.split(dic_els[1],",")
			secMap = list()
			for i in range(0,len(secEl)):
				secMap.append("br(pactos):"+''.join(str.split(secEl[i])[0])[3:])

			tmpDic[''.join(str(e) for e in secMap)] = str.split(dic_els[0])[0]

		self.__gestures = tmpDic
		

		iniFile.close()


	def read_commands(self):

		iniFile = open(os.path.join(PLUGIN_DIR,"bjSettings",paGlobals.commands_file),"r")
		tmpDic = dict()
		for line in iniFile:
			if line.startswith(codecs.BOM_UTF8.decode()):
				line = line[3:]
			line = line[:-1]
			dic_els = str.split(line,":=")
			secEl = str.split(dic_els[1],",")
			secMap = list()
			for i in range(0,len(secEl)):
				secMap.append("br(pactos):"+''.join(str.split(secEl[i])[0]))

			tmpDic[str.split(dic_els[0])[0]] = tuple(secMap)

		commands = dict()
		commands["globalCommands.GlobalCommands"] = tmpDic

		iniFile.close()

		self.gestureMap = inputCore.GlobalGestureMap(commands)
		log.info(self.gestureMap._map)


class InputGesture(braille.BrailleDisplayGesture, brailleInput.BrailleInputGesture):

	source = BrailleDisplayDriver.name

	def __init__(self, keys, isMod78):
		super(InputGesture, self).__init__()
		self.keyCodes = set(keys)

		self.keyNames = names = set()
		isBrailleInput = True

		for key in self.keyCodes:
			if isBrailleInput:
				if (DOT1_KEY <= key <= DOT6_KEY) or (DOT7_KEY <= key <= DOT8_KEY):
					if (DOT7_KEY <= key <= DOT8_KEY) and isMod78:
						log.info("--------------->> ** This key == %r ** <<---------" % key)
						key = key-15
					self.dots |= 1 << (key - DOT1_KEY)
				elif ((key == SPACE_KEY1) | (key == SPACE_KEY2)):
					self.space = True
				else:
					# This is not braille input.
					isBrailleInput = False
					self.dots = 0
					self.space = False
			if key >= FIRST_ROUTING_KEY:
				names.add("routing")
				self.routingIndex = key - FIRST_ROUTING_KEY
				log.info("#################### routingIndex == %r ##############" % self.routingIndex)
			else:
				try:
					names.add(KEY_NAMES[key]) # here we must use model specific keynammes
				except KeyError:
					log.debugWarning("Unknown key with id %d" % key)

		#log.info(" %%%%%%%%%%%%%%%%%%%%%  names = %r %%%%%%%%%%%%%%%%%%%%%%%%%%%%" % names)
		self.id = "+".join(names)
